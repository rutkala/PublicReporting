name: publicreporting

services:
  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - publicreporting_network
  mc:
    image: minio/mc:latest
    container_name: minio_mc
    networks:
      - publicreporting_network
    entrypoint: ["sleep", "infinity"]  # Keeps the container running

  nessie: 
    image: projectnessie/nessie:latest
    container_name: nessie
    environment:
      QUARKUS_HTTP_PORT: 19120
      NESSIE_VERSION_STORE_TYPE: ROCKSDB
    ports:
      - "19120:19120"
    volumes:
      - nessie_data:/data
    networks:
      - publicreporting_network
  
  jupyter:
    image: jupyter/pyspark-notebook:latest
    container_name: jupyter
    environment:
      JUPYTER_TOKEN: "password"
    ports:
      - "8888:8888"
    volumes:
      - jupyter_data:/home/jovyan/work
    networks:
      - publicreporting_network

  trino:
    image: trinodb/trino:latest
    container_name: trino
    ports:
      - "8081:8080"  # Map Trino's default port to 8081 to avoid conflicts
    environment:
      - TRINO_NODE_ID=trino-node
      - TRINO_HTTP_PORT=8080  # Internal port for Trino
      - TRINO_DISCOVERY_SERVER_ENABLED=true
    volumes:
      - trino_data:/data
    networks:
      - publicreporting_network  # Custom network for the container

networks:
  publicreporting_network:
    driver: bridge
    
volumes:
  minio_data:
    driver: local
  nessie_data:
    driver: local
  jupyter_data:
    driver: local
  trino_data:
    driver: local
  superset_data:
    driver: local
