name: lakehouse

services:
  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server --address ":9000" /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - network
  mc:
    image: minio/mc:latest
    container_name: minio_mc
    networks:
      - network
    entrypoint: ["sleep", "infinity"]  # Keeps the container running

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/certs:/etc/letsencrypt
      - ./nginx/www:/var/www/certbot
    depends_on:
      - minio
    networks:
      - network

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - ./nginx/certs:/etc/letsencrypt
      - ./nginx/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do sleep 12h & wait $${!}; certbot renew --webroot -w /var/www/certbot; done;'"
    depends_on:
      - nginx
    networks:
      - network

  nessie: 
    image: projectnessie/nessie:latest
    container_name: nessie
    environment:
      QUARKUS_HTTP_PORT: 19120
      NESSIE_VERSION_STORE_TYPE: ROCKSDB
    ports:
      - "19120:19120"
    volumes:
      - nessie_data:/data
    networks:
      - network
  
  jupyter:
    image: jupyter/pyspark-notebook:latest
    container_name: jupyter
    environment:
      JUPYTER_TOKEN: "password"
    ports:
      - "8888:8888"
    volumes:
      - jupyter_data:/home/jovyan/work
    networks:
      - network
    command: >
      start-notebook.sh
      --NotebookApp.allow_origin='https://notebook.open-reporting.dev'
      --NotebookApp.trust_xheaders=True
      --NotebookApp.websocket_compression_options=None
      --NotebookApp.allow_remote_access=True


  trino:
    image: trinodb/trino:latest
    container_name: trino
    ports:
      - "8081:8080"  # Map Trino's default port to 8081 to avoid conflicts
    environment:
      - TRINO_NODE_ID=trino-node
      - TRINO_HTTP_PORT=8080  # Internal port for Trino
      - TRINO_DISCOVERY_SERVER_ENABLED=true
    volumes:
      - trino_data:/data
      - ./Trino/config.properties:/etc/trino/config.properties:ro
      - ./Trino/iceberg.properties:/etc/trino/catalog/iceberg.properties:ro
    networks:
      - network  # Custom network for the container

  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    restart: always
    environment:
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=metabase
      - MB_DB_PORT=5432
      - MB_DB_USER=metabase
      - MB_DB_PASS=metabase
      - MB_DB_HOST=database
    depends_on:
      - database
    networks:
      - network

  database:
    image: postgres:14
    container_name: database
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - database_data:/var/lib/postgresql/data
    networks:
      - network

  code-server:
    image: codercom/code-server:latest
    container_name: code-server
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - PASSWORD=password  # change this!
      - TZ=Europe/Warsaw
    volumes:
      - ./projects:/home/coder/projects     # mount your repos
      - ./data/code-server:/home/coder/.local/share/code-server
    ports:
      - "127.0.0.1:8443:8080"   # expose only to localhost, use nginx for https
    networks:
      - network

networks:
  network:
    driver: bridge
    
volumes:
  minio_data:
    driver: local
  nessie_data:
    driver: local
  jupyter_data:
    driver: local
  trino_data:
    driver: local
  database_data:
    driver: local
